#!/bin/sh
# hostname unit for vm-helper
# Update hostname and hosts for VM
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Aron Xu <aron@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

HOSTNAME_DEFAULT=debian

CONF_DATA_FILE=/etc/vm-helper/seeds/$0
if ! [ -z $CONF_DATA ]; then
    CONF_DATA_FILE=$CONF_DATA/$0
fi

OPTS_AVAIL="HOSTNAME_FALLBACK HOSTS_IPV4_ADD1 HOSTS_IPV4_ADD2"
if [ -r $CONF_DATA_FILE ]; then
    HOSTNAME_FALLBACK=$(grep '^HOSTNAME_FALLBACK=' $CONF_DATA_FILE | cut -f2 -d'=')
    HOSTS_IPV4_ADD1=$(grep '^HOSTS_IPV4_ADD1=' $CONF_DATA_FILE | cut -f2 -d'=')
    HOSTS_IPV4_ADD2=$(grep '^HOSTS_IPV4_ADD2=' $CONF_DATA_FILE | cut -f2 -d'=')
fi

HOSTS_IPV4_DEFAULT="127.0.0.1       localhost"
HOSTS_IPV6_DEFAULT="
# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters"

gen_hostname ()
{
    if [ -f /etc/hostname ]; then
        HOSTNAME=`head -1 /etc/hostname`
    else
        if `which hostname`; then
            HOSTNAME=`hostname`
            printf "W: unit_hostname: /etc/hostname not found, using hostname output: $HOSTNAME\n"
        elif [ ! -z "$HOSTNAME_FALLBACK" ]; then
            HOSTNAME=$HOSTNAME_FALLBACK
            printf "W: unit_hostname: /etc/hostname not found, using fallback value: $HOSTNAME\n"
        else
            HOSTNAME=$HOSTNAME_DEFAULT
            printf "W: unit_hostname: /etc/hostname not found, using preset value: $HOSTNAME\n"
        fi
    fi
}

gen_hosts()
{
    if [ -z $HOSTNAME ]; then
        printf "E: unit_hostname: gen_hosts: Missing argument.\n"
        exit 1
    fi

    if `ip route | grep default | grep via >/dev/null 2>&1`; then
        local DEFAULTGW_IPV4_DEV="`ip route | grep default | awk '{ print $5 }'`"
    else
        local DEFAULTGW_IPV4_DEV="`ip route | grep default | awk '{ print $3 }'`"
    fi

    if [ -z $DEFAULTGW_IPV4_DEV ]; then
        # Can be better tuned for detecting device that's in UP state and have
        # a valid address
        local DEFAULTGW_IPV4_DEV=eth0
    fi

    local DEFAULTGW_IPV4_ADDR="`ip addr show $DEFAULTGW_IPV4_DEV | grep "inet " | awk '{ print $2 }' | cut -d '/' -f1`"
    if [ -z "$DEFAULTGW_IPV4_ADDR" ]; then
        printf "W: unit_hostname: gen_hosts: No valid IPv4 default gateway, ignoring.\n"
        local HOSTS_IPV4_CUSTOM="\n\n"
    else
        local HOSTS_IPV4_CUSTOM="\n$DEFAULTGW_IPV4_ADDR       $HOSTNAME\n"
    fi

    HOSTS_VALUE=${HOSTS_IPV4_DEFAULT}\n${HOSTS_IPV4_ADD1}\n${HOSTS_IPV4_ADD2}${HOSTS_IPV4_CUSTOM}${HOSTS_IPV6_DEFAULT}${HOSTS_IPV6_CUSTOM}
}

unit_hostname_deploy ()
{
    gen_hostname
    gen_hosts $HOSTNAME
    printf "$HOSTNAME\n" > /etc/hostname
    printf "$HOSTS_VALUE\n" > /etc/hosts
}

# Execution starts
case $1 in
    deploy)
        unit_hostname_deploy
        ;;
    prep)
        unit_hostname_deploy
        ;;
    *)
        printf "unit_ssh: Argument required, possible values:\n deploy prep\n"
        ;;
esac
